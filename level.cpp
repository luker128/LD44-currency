#include "level.h"
#include "gfx.h"
#include <cstdlib>

  int level[][MAP_W*MAP_H] = {
    {
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,

    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,

    1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,14,15,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,4,3,8, 3,6,5,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,2,8, 2,2,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,1,1,2,8, 2,2,1,1,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 4,3,6,3,6, 3,6,8,6,5, 1,1,1,1,1, 1,1,1,1,1,

    1,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,8,2,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,8,2,1, 1,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,4,3, 6,8,6,3,6, 3,6,3,6,3, 6,5,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,2, 2,8,2,2,2, 2,2,2,2,2, 2,1,1,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,1,1,2, 2,8,2,2,2, 2,2,2,2,2, 2,1,1,1,1, 1,1,1,1,1,

    1,1,1,1,1, 1,4,3,6,3, 6,3,6,3,6, 3,3,6,3,6, 8,6,3,5,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 8,2,2,1,1, 1,1,1,1,1,
    1,1,1,1,1, 1,1,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 8,2,2,1,1, 1,1,1,1,1,
    1,1,1,1,4, 8,6,3,6,3, 6,3,6,3,6, 3,6,3,6,3, 6,3,6,3,6, 5,1,1,1,1,
    1,1,1,1,1, 8,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 1,1,1,1,1,

    1,1,1,1,1, 8,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 1,1,1,1,1,
    1,1,4,3,6, 3,6,3,6,3, 6,3,6,3,6, 3,6,3,6,3, 6,3,6,3,6, 8,6,5,1,1,
    1,1,1,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 8,2,1,1,1,
    1,1,1,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 8,2,1,1,1,
    4,3,6,3,6, 8,6,3,6,3, 6,3,6,3,6, 3,6,3,6,3, 6,3,6,3,6, 3,6,3,6,5,

    1,2,2,2,2, 8,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,1,
    1,2,2,2,2, 8,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,1,
    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    },
     {
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 

    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 

    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1,14, 15, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 4, 3, 8,  3, 6, 5, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 2, 8,  2, 2, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 2, 8,  2, 2, 1, 1, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  4,13, 6, 3, 6,  3, 6, 8, 6, 5,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 

    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 2, 2, 2, 2,  2, 2, 8, 2, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 1,  1, 2, 2, 2, 2,  2, 2, 8, 2, 1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 4, 3,  6, 8, 6, 9, 6,  3, 6, 9, 6, 3,  6, 5, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 2,  2, 8, 2, 2, 2,  2, 2, 2, 2, 2,  2, 1, 1, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 1, 2,  2, 8, 2,11, 2,  2, 2, 2, 2,12,  2, 1, 1, 1, 1,  1, 1, 1, 1, 1, 

    1, 1, 1, 1, 1,  1, 4, 3, 6, 3,  6, 3, 6, 9, 6, 13, 3, 6, 9, 6,  3, 6, 3, 5, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  1, 1, 1, 2, 2,  2, 2,12, 2, 2,  2, 2,11, 2, 2, 10, 2, 2, 1, 1,  1, 1, 1, 1, 1, 
    1, 1, 1, 1, 4,  8, 6, 3, 6, 9,  6, 3, 6, 3, 6,  3, 6, 9, 6, 3,  6, 3, 6, 3, 6,  5, 1, 1, 1, 1, 
    1, 1, 1, 1, 1,  8, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  1, 1, 1, 1, 1, 

    1, 1, 1, 1, 1,  8, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  1, 1, 1, 1, 1, 
    1, 1, 4, 3, 6,  3, 6, 3, 6,13,  6, 9, 6, 3, 6,  3, 6,13, 6, 9,  6, 3, 6, 3, 6,  8, 6, 5, 1, 1, 
    1, 1, 1,12, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2,11,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  8, 2, 1, 1, 1, 
    1, 1, 1, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  8, 2, 1, 1, 1, 
    4, 3, 6, 3, 6,  8, 6, 3, 6, 3,  6, 3, 6, 3, 6,  3, 6, 3, 6, 3,  6, 3, 6, 3, 6,  3, 6, 3, 6, 5, 

    1, 2, 2, 2, 2,  8, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 1, 
    1, 2, 2, 2, 2,  8, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 2,  2, 2, 2, 2, 1, 
    0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0
    },
  };

  extern Tilemap* tilemapFloor;
  int currentLevel = 0;

void setLevel(int l) {
  currentLevel = l;
  for (int y=0; y<MAP_H; y++) {
    for (int x=0; x<MAP_W; x++) {
      tilemapFloor->setAt(x, y, level[l][x+y*MAP_W]);
    }
  }
}


void setTile(int x, int y, int newTile) {
  level[currentLevel][x + y*MAP_W] = newTile;
  tilemapFloor->setAt(x, y, newTile);
}


bool isTileSolid(int tile) {
  return tile == 0 || tile == 3 || tile == 6 || tile == 8 || tile == 13;
}

bool isTileLadder(int tile) {
  return tile == 8;
}

int tileAt(int x, int y) {
  return level[currentLevel][x + y*MAP_W];
}


